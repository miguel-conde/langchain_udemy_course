---
title: "LangGraph"
author: "Miguel Conde"
date: "2025/01/27"
format: 
  revealjs:
    embed-resources: true
    scrollable: true
    navigation-mode: vertical
---

# Basics

## Resources

- [LangGraph](https://www.langchain.com/langgraph)
- [Langchain Academy](https://academy.langchain.com/)
- [Introduction to LangGraph](https://academy.langchain.com/courses/intro-to-langgraph)

## FAQ

![](faq.png)

## LangGraph stack

![](langgraph_stack.png)

## Control Flows

![](fixed_vs_LLM.png)

# Agents

![](agent.png)

## Many kinds of agents

![](kinds.png)

## The challenge

![](challenges.png)

## What is LangGraph for?

![](help)

## Basic demo {.smaller}

:::: {.columns}

::: {.column width="40%"}
[ReAct](https://react-lm.github.io/), a general agent architecture.

+ `act` - let the model call specific tools
+ `observe` - pass the tool output back to the model
+ `reason` - let the model reason about the tool output to decide what to do next (e.g., call another tool or just respond directly)
:::

::: {.column width="60%"}

![](react.png)
:::

::::

# Advanced topics

## Advanced topics 

- Messages: **trim**, **filter**, **summarize**
- **External memory**
- **Human-in-the-loop**
  - **Streaming**: 
    - Sync and async methods / "updates" and "values" modes
    - Messages / tokens

## More Advanced topics 

- More **Human-in-the-loop**
  - **Breakpoints**: a simple way to stop the graph at specific steps.
    - To await user ***approval*** before executing the next node.
    - To modify the graph state (***editing***) and introduce **human feedback**.
    - Can be conditionally triggered (**dynamic breakpoints**)


## And more Advanced topics 

- More **Human-in-the-loop**
  - Support for **debugging**: viewing, re-playing, and even forking from past states (*time travel*)

<br>

- **Parallelization**
- **Sub-graphs**
- **Map-Reduce**

# Demo - Research assistant

## Demo - Research assistant

![](research%20assistant.png)

## Demo - Research assistant

![](research%20assistant%20graph.jpg)

# Memory

## Short and Long-Term Memory

[Long-Term_Memory.pdf](https://files.cdn.thinkific.com/file_uploads/967498/attachments/dc4/f52/87a/LangChain_Academy_-_Introduction_to_LangGraph_-_Long-Term_Memory.pdf)

![](short_long_term_memory.png)

## Short Term Memory

![](short_term_memory.png)

## Long Term Memory

![](long_term_memory.png)

## When to update long-term memory

![](when_update_memory.png)

## Memory store

![](store.png)

# Deployment

## Components

![](deployment.png)

## Components {.smaller}

- [CLI](https://langchain-ai.github.io/langgraph/concepts/langgraph_cli/): Builds Docker image w/ code for the server, your graph, and dependencies
- Server
  - HTTP worker: Client communication, creating run ID for requests to execute graph (e.g., invoke, stream)
  - Queue worker: Executing the graph 
- Databases
    - [Redis](https://langchain-ai.github.io/langgraph/concepts/langgraph_server/#persistence-and-task-queue): Communication between workers (streaming, run cancellation)
    - [Postgres](https://langchain-ai.github.io/langgraph/concepts/langgraph_server/#persistence-and-task-queue): Support for short / long-term memory, task queue
- Studio
  - LangGraph [Cloud](https://langchain-ai.github.io/langgraph/concepts/#langgraph-platform) and [Studio](https://langchain-ai.github.io/langgraph/concepts/langgraph_studio/): Use the [CLI](https://langchain-ai.github.io/langgraph/concepts/langgraph_cli/) to build the Docker image for you
- Clients
  - [Python and JS SDK](https://langchain-ai.github.io/langgraph/concepts/sdk/): Clients for working with LangGraph server API
  - [Remote Graph](https://langchain-ai.github.io/langgraph/how-tos/use-remote-graph/): For working with deployed graphs in LangGraph library 

## Production

![](production.png)


# Bonus

- [GenAI Agents: Comprehensive Repository for Development and Implementation](https://github.com/NirDiamant/GenAI_Agents)
- [Our AI Data Science Team (ðŸª– An Army Of Agents)](https://github.com/business-science/ai-data-science-team)